{'score': 0, 'time': 0, 'booster': 'gblinear', 'eval_metric': 'mphe', 'grow_policy': 'lossguide', 'objective': 'reg:squaredlogerror', 'sampling_method': 'gradient_based', 'tree_method': 'approx'}
{'score': 7, 'time': 156, 'booster': 'gbtree', 'eval_metric': 'gamma-nloglik', 'grow_policy': 'lossguide', 'objective': 'reg:squaredlogerror', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 7, 'time': 170, 'booster': 'dart', 'eval_metric': 'ndcg', 'grow_policy': 'depthwise', 'objective': 'reg:squarederror', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 0, 'time': 9, 'booster': 'gblinear', 'eval_metric': 'aft-nloglik', 'grow_policy': 'depthwise', 'objective': 'multi:softmax', 'sampling_method': 'gradient_based', 'tree_method': 'hist'}
{'score': 5, 'time': 180, 'booster': 'gbtree', 'eval_metric': 'rmse', 'grow_policy': 'lossguide', 'objective': 'reg:tweedie', 'sampling_method': 'gradient_based', 'tree_method': 'approx'}
{'score': 6, 'time': 175, 'booster': 'gbtree', 'eval_metric': 'map', 'grow_policy': 'depthwise', 'objective': 'rank:ndcg', 'sampling_method': 'gradient_based', 'tree_method': 'exact'}
{'score': 1, 'time': 40, 'booster': 'gblinear', 'eval_metric': 'auc', 'grow_policy': 'depthwise', 'objective': 'reg:logistic', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 0, 'time': 15, 'booster': 'gbtree', 'eval_metric': 'aucpr', 'grow_policy': 'lossguide', 'objective': 'multi:softprob', 'sampling_method': 'gradient_based', 'tree_method': 'approx'}
{'score': 0, 'time': 2, 'booster': 'gblinear', 'eval_metric': 'mae', 'grow_policy': 'lossguide', 'objective': 'multi:softmax', 'sampling_method': 'gradient_based', 'tree_method': 'hist'}
{'score': 6, 'time': 180, 'booster': 'dart', 'eval_metric': 'auc', 'grow_policy': 'lossguide', 'objective': 'count:poisson', 'sampling_method': 'gradient_based', 'tree_method': 'gpu_hist'}
{'score': 3, 'time': 180, 'booster': 'dart', 'eval_metric': 'rmsle', 'grow_policy': 'depthwise', 'objective': 'reg:tweedie', 'sampling_method': 'gradient_based', 'tree_method': 'approx'}
{'score': 6, 'time': 46, 'booster': 'dart', 'eval_metric': 'mae', 'grow_policy': 'lossguide', 'objective': 'reg:tweedie', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 0, 'time': 9, 'booster': 'gblinear', 'eval_metric': 'logloss', 'grow_policy': 'lossguide', 'objective': 'survival:aft', 'sampling_method': 'gradient_based', 'tree_method': 'hist'}
{'score': 0, 'time': 2, 'booster': 'gblinear', 'eval_metric': 'mlogloss', 'grow_policy': 'depthwise', 'objective': 'multi:softmax', 'sampling_method': 'gradient_based', 'tree_method': 'gpu_hist'}
{'score': 1, 'time': 42, 'booster': 'gblinear', 'eval_metric': 'auc', 'grow_policy': 'lossguide', 'objective': 'reg:logistic', 'sampling_method': 'gradient_based', 'tree_method': 'hist'}
{'score': 7, 'time': 183, 'booster': 'gbtree', 'eval_metric': 'aft-nloglik', 'grow_policy': 'lossguide', 'objective': 'reg:squaredlogerror', 'sampling_method': 'gradient_based', 'tree_method': 'approx'}
{'score': 0, 'time': 0, 'booster': 'dart', 'eval_metric': 'tweedie-nlogli', 'grow_policy': 'depthwise', 'objective': 'multi:softmax', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 5, 'time': 161, 'booster': 'gbtree', 'eval_metric': 'mlogloss', 'grow_policy': 'depthwise', 'objective': 'reg:tweedie', 'sampling_method': 'gradient_based', 'tree_method': 'gpu_hist'}
{'score': 0, 'time': 18, 'booster': 'dart', 'eval_metric': 'gamma-nloglik', 'grow_policy': 'depthwise', 'objective': 'multi:softmax', 'sampling_method': 'gradient_based', 'tree_method': 'exact'}
{'score': 7, 'time': 95, 'booster': 'gbtree', 'eval_metric': 'logloss', 'grow_policy': 'lossguide', 'objective': 'reg:squaredlogerror', 'sampling_method': 'gradient_based', 'tree_method': 'hist'}
{'score': 5, 'time': 156, 'booster': 'dart', 'eval_metric': 'map', 'grow_policy': 'lossguide', 'objective': 'reg:tweedie', 'sampling_method': 'uniform', 'tree_method': 'gpu_hist'}
{'score': 1, 'time': 54, 'booster': 'gblinear', 'eval_metric': 'mae', 'grow_policy': 'lossguide', 'objective': 'survival:cox', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 0, 'time': 2, 'booster': 'gblinear', 'eval_metric': 'auc', 'grow_policy': 'lossguide', 'objective': 'multi:softmax', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 1, 'time': 18, 'booster': 'gblinear', 'eval_metric': 'gamma-nloglik', 'grow_policy': 'lossguide', 'objective': 'reg:tweedie', 'sampling_method': 'uniform', 'tree_method': 'hist'}
{'score': 7, 'time': 129, 'booster': 'gbtree', 'eval_metric': 'ndcg', 'grow_policy': 'depthwise', 'objective': 'reg:squarederror', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 7, 'time': 165, 'booster': 'dart', 'eval_metric': 'ndcg', 'grow_policy': 'depthwise', 'objective': 'reg:squarederror', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 7, 'time': 160, 'booster': 'gbtree', 'eval_metric': 'error', 'grow_policy': 'depthwise', 'objective': 'rank:pairwise', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 6, 'time': 161, 'booster': 'dart', 'eval_metric': 'cox-nloglik', 'grow_policy': 'depthwise', 'objective': 'rank:map', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 6, 'time': 161, 'booster': 'dart', 'eval_metric': 'poisson-nloglik', 'grow_policy': 'depthwise', 'objective': 'reg:gamma', 'sampling_method': 'uniform', 'tree_method': 'exact'}
{'score': 7, 'time': 157, 'booster': 'gbtree', 'eval_metric': 'gamma-deviance', 'grow_policy': 'depthwise', 'objective': 'reg:squarederror', 'sampling_method': 'uniform', 'tree_method': 'exact'}
--------------------------------------------------
##### Results
Time elapsed:  2840.7053351402283
Parameter combinations evaluated:  30
Score best parameters:  7.0
--------------------
Best parameters: 
booster = 0 int
eval_metric = poisson-nloglik str
grow_policy = depthwise str
objective = reg:squarederror str
sampling_method = 0 int
tree_method = approx str
--------------------